<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="Controller_v2" Id="{af87d6dd-0784-46eb-bd9b-ea6d96cfb9a1}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Controller_v2
VAR
		eCTRL_Mode 				: E_CTRL_MODE := eCTRL_MODE_Tune; 	(*   eCTRL_MODE_TUNE  ;*)
		bSelSetpoint			: BOOL	:= FALSE;
		fW						: LREAL;						(* setpoint *)
		fW1						: LREAL := 170.0;					(* first setpoint *)
		fW2						: LREAL := 210.0;				(* second setpoint - standby setpoint*)
		fY						: LREAL;						(* control value *)
		fX						: LREAL;						(* actual value from simulated process *)
		bYPWMPos				: BOOL;
		bYPWMNeg				: BOOL;
		
		bNoise					: BOOL;
		bError 					: BOOL;
		eErrorId 				: E_CTRL_ErrorCodes;
		
		stControllerParameter	: ST_CTRL_TempCtrlParameter := (		
		
		(* general parameters 													 *)
		iMode					:= 1,											(* 1=heating, 2=cooling, 3=heating&cooling *)
		iReactionOnFailure		:= eCTRL_ReactionOnFailure_StopController,		(* 0=controller off, 1=manual op, 2=yMin, 3=yMax *)
	
		bSelCtrlParameterSet	:= FALSE,										(* FALSE = internal set, TRUE = external set *)
	
		dwAlarmSupp				:= 16#0000EFFF,									(* alarm suppression *)
		tCtrlCycleTime			:= T#500MS,										(* controller cycle time *)
		tTaskCycleTime			:= T#10MS,										(* plc task cycle time *)
		
		(* tuning parameters 													 *)
		iTuningMode				:= 1,											(* only heating, only cooling, first heating then cooling or vice versa *)
	
		tTuneStabilisation		:= T#20S,										(* wait for a stable system *)
	
		fEndTunePercentHeating	:= 80.0,										(* switch to closed loop control when X > 0.8*W *)
		fYTuneHeating			:= 100.0,										(* step change while tuning operation *)
		fYStableHeating			:= 0.0,											(* tuning operation *)
	
		fEndTunePercentCooling	:= 20.0,										(* switch to closed loop control when X < 0.2*W *)
		fYTuneCooling			:= 0.0,											(* step change while tuning operation *)
		fYStableCooling			:= 0.0,											(* tuning operation *)
		fScalingFactor			:= 1.0,											(* Scaling factor for KP heating/cooling *)
		
		(* setpoint parameters 													 *)
		fWMin					:= 0.0,											(* lower limit *)
		fWMax					:= 300.0,										(* upper limit *)
	
		(* start up *)
		bEnableSoftStart		:= FALSE,										(* FALSE = no soft start, TRUE = soft start *)
		bEnableRamping			:= FALSE,										(* FALSE = no ramping, TRUE = ramping *)
	
		fWStartUp				:= 0.0,											(* soft start plateau setpoint *)
		tStartUp				:= T#0MS,										(* soft start waiting time*)
		bStartUpRamping			:= FALSE,										(* enable ramping while start up phase *)
		fWStartUpVeloPos		:= 1.0,											(* max gradient for increasing setpoint in start up phase*)
		fWStartUpVeloNeg		:= 1.0,											(* max gradient for decreasing setpoint in start up phase *)
	
		fWVeloPos				:= 1.0,											(* max gradient for increasing setpoint *)
		fWVeloNeg				:= 1.0,											(* max gradient for decreasing setpoint *)	
	
		(* actual value parameters     											 *)
		bFilter 				:= FALSE,
		tFilter					:= T#0S,
		
		(* deadband parameters     												 *)
		bDeadband				:= FALSE,
		fEDeadband				:= 0.0,											(* deadband *)
		
		(* control value parameters     										 *)
		fYMin					:= 0.0,											(* lower limit *)
		fYMax					:= 100.0,										(* upper limit *)
		fYManual				:= 0.0,									 		(* manual operation*)
		fYOnFailure				:= 0.0,											(* control value on failure *)
	
		tPWMCycleTime			:= t#1s,										(* PWM: period *)
		tPWMMinOffTime			:= t#0s,										(* PWM: min off time *)
		tPWMMinOnTime			:= t#0s,										(* PWM: min on time *)
		tPWMWaitingTime			:= t#0s,										(* PWM: min waiting time *) (* not yet implemented !!!!*)
	
		fYThresholdOff			:= 0.0,											(* 3-Point: Off threshold *)
		fYThresholdOn			:= 0.0,											(* 3-Point: On threshold *)
	
		nCyclesForSwitchOver	:= 100,
	
		(* controller settings			     									 *)
		bEnablePreController 	:= FALSE,										(* enable precontroller *)
		bEnableZones 			:= FALSE,										(* enable zone around setpoint with open loop control *)
		bEnableCVFilter 		:= FALSE,										(* enable filter for CV (type see iFilterType) *)
		iFilterType 			:= E_FilterType_FIRSTORDER,			 			(* filtertype of CV filter *)
		iControllerType 		:= eCTRL_ControllerType_PID,					(* used controller normally PID *)
		
		
		(* min max temperatures	     											 *)
		TempLow					:= -5.0,
		TempLowLow				:= -10.0,
		TempHigh				:= 5.0,
		TempHighHigh			:= 10.0,
		TempAbsoluteHigh		:= 300.0,
		TempAbsoluteLow			:= 0.0,	
		
		(* internal tuning parameters *)
		fTuneKp					:= 1.2,
		fTuneTn					:= 2.0,
		fTuneTv					:= 0.42,
		fTuneTd					:= 0.25
		);
	
	fbTempController			: FB_CTRL_TempController;
	fbProcess					: FB_Process;	
	fbCtrlParameter				: FB_CTRL_CtrlParameter;
	stController				: ST_CTRL_ParaController;
	
	(* Debug *)
	fMaxOvershoot			: LREAL;
	tStartUpTime			: TIME;
	eCtrlState				: E_CTRL_STATE;	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Select setpoint *)
IF bSelSetpoint THEN
	fW := fW2;
ELSE
	fW := fW1;
END_IF

(* Simulate process *)
fbProcess(	fY := fbTempController.fYAnalog, 
			bNoise := bNoise, 
			tTa := stControllerParameter.tTaskCycleTime);	

(* Actual temperature *)				
fX := fbProcess.fX;		// Add measured temperature here

(* Start controller *)
fbTempController(
					eCtrlMode				:= eCTRL_Mode, 
					bSelSetpoint			:= bSelSetpoint, 
					fW1						:= fW1, 
					fW2						:= fW2, 
					fX						:= fX, 
					fYManual				:= , 
					bOpenThermocouple		:= FALSE, 
					bReverseThermocouple	:= FALSE, 
					bBackVoltage			:= FALSE, 
					bLeakage				:= FALSE, 
					bShortCircuit			:= FALSE, 
					bOpenCircuit			:= FALSE, 
					sParaControllerExternal	:= stController, 
					sControllerParameter	:= stControllerParameter, 
					);
					 
(* Analog output *)			
fY := fbTempController.fYAnalog;
(* Digital (PWM) output *)
bYPWMPos := fbTempController.bYPWMPos;
bYPWMNeg := fbTempController.bYPWMNeg;

bError := fbTempController.bError;
eErrorId := fbTempController.eErrorId;

(* Choose set of controller parameters *)
IF fbTempController.eCtrlState = eCTRL_STATE_TUNED THEN
	eCTRL_Mode := eCTRL_MODE_ACTIVE;	
END_IF


(* Debug *)
fMaxOvershoot := fbTempController.fMaxOverShoot;
tStartUpTime := fbTempController.tStartUpTime;

(* Scope *)
fW_Scope := fW;
fX_Scope := fX;
fY_Scope := fY;


]]></ST>
    </Implementation>
    <LineIds Name="Controller_v2">
      <LineId Id="3" Count="57" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>