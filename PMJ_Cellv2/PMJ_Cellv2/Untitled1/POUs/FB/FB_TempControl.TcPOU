<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="FB_TempControl" Id="{a020a10b-6252-4579-b144-1585a034efb2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TempControl
VAR_INPUT
	bEnableHeater 		: BOOL;
	lrPV 			: LREAL;    (*Process Variable *)
	lrSP 			: LREAL;	(*Set Point *)
END_VAR
VAR_OUTPUT
	bEnableHotend	: BOOL := FALSE;		(* Enable EL7332-DCM Control Ch1*)
	iOutput 		: INT;		(* Output-INT set to EL7332 DCM Velocity Ch1*)
	bError 			: BOOL;
	eErrorId 		: E_CTRL_ErrorCodes;
END_VAR
VAR
	eCTRL_Mode 				: E_CTRL_MODE := eCTRL_MODE_Tune; 	(*   eCTRL_MODE_TUNE  ;*)
	bSelSetpoint			: BOOL:= FALSE;
	fW1						: LREAL;				(* first setpoint *)
	fW2						: LREAL;				(* second setpoint - standby setpoint*)
	fY						: LREAL;						(* control value *)
	fX						: LREAL;						(* actual value from simulated process *)
	bYPWMPos				: BOOL;
	bYPWMNeg				: BOOL;

	(************************** Controller Parameters structure ****************************************)
	stControllerParameter	: ST_CTRL_TempCtrlParameter := (		
		(* general parameters *)
		iMode					:= 1,											(* 1=heating, 2=cooling, 3=heating&cooling *)
		iReactionOnFailure		:= eCTRL_ReactionOnFailure_StopController,		(* 0=controller off, 1=manual op, 2=yMin, 3=yMax *)
	
		bSelCtrlParameterSet	:= FALSE,			(* FALSE = internal set, TRUE = external set *)
	
		dwAlarmSupp				:= 16#0000EFFF,		(* alarm suppression *)
		tCtrlCycleTime			:= T#500MS,			(* controller cycle time *)
		tTaskCycleTime			:= T#10MS,			(* plc task cycle time *)
		
		(* tuning parameters *)
		iTuningMode				:= 1,				(* only heating, only cooling, first heating then cooling or vice versa *)
	
		tTuneStabilisation		:= T#1S,			(* wait for a stable system *)
		fEndTunePercentHeating	:= 80.0,			(* switch to closed loop control when X > 0.8*W *)
		fYTuneHeating			:= 31000,			(* step change while tuning operation *)
		fYStableHeating			:= 0.0,				(* tuning operation *)
	
		fEndTunePercentCooling	:= 20.0,			(* switch to closed loop control when X < 0.2*W *)
		fYTuneCooling			:= 0.0,				(* step change while tuning operation *)
		fYStableCooling			:= 0.0,				(* tuning operation *)
		fScalingFactor			:= 1.0,				(* Scaling factor for KP heating/cooling *)
		
		(* setpoint parameters *)
		fWMin					:= 0.0,				(* lower limit *)
		fWMax					:= 250.0,			(* upper limit *)
	
		(* start up *)
		bEnableSoftStart		:= FALSE,			(* FALSE = no soft start, TRUE = soft start *)
		bEnableRamping			:= FALSE,		    (* FALSE = no ramping, TRUE = ramping *)
	
		fWStartUp				:= 0.0,				(* soft start plateau setpoint *)
		tStartUp				:= T#0MS,			(* soft start waiting time*)
		bStartUpRamping			:= FALSE,			(* enable ramping while start up phase *)
		fWStartUpVeloPos		:= 1.0,				(* max gradient for increasing setpoint in start up phase*)
		fWStartUpVeloNeg		:= 1.0,				(* max gradient for decreasing setpoint in start up phase *)
	
		fWVeloPos				:= 1.0,				(* max gradient for increasing setpoint *)
		fWVeloNeg				:= 1.0,				(* max gradient for decreasing setpoint *)	
	
		(* actual value parameters *)
		bFilter 				:= FALSE,
		tFilter					:= T#0S,
		
		(* deadband parameters *)
		bDeadband				:= FALSE,
		fEDeadband				:= 0.0,				(* deadband *)
		
		(* control value parameters*)
		fYMin					:= 0,				(* lower limit *)
		fYMax					:= 30000,			(* upper limit *)
		fYManual				:= 0.0,				(* manual operation*)
		fYOnFailure				:= 0.0,				(* control value on failure *)
		
		tPWMCycleTime			:= T#1S,										(* PWM: period *)
		tPWMMinOffTime			:= t#0s,										(* PWM: min off time *)
		tPWMMinOnTime			:= t#0s,										(* PWM: min on time *)
		tPWMWaitingTime			:= t#0s,										(* PWM: min waiting time *) (* not yet implemented !!!!*)
		
		fYThresholdOff			:= 0.0,				(* 3-Point: Off threshold *)
		fYThresholdOn			:= 0.0,				(* 3-Point: On threshold *)
	
		nCyclesForSwitchOver	:= 100,
	
		(* controller settings *)
		bEnablePreController 	:= FALSE,			(* enable precontroller *)
		bEnableZones 			:= FALSE,			(* enable zone around setpoint with open loop control *)
		bEnableCVFilter 		:= FALSE,			(* enable filter for CV (type see iFilterType) *)
		iFilterType 			:= E_FilterType_FIRSTORDER,		(* filtertype of CV filter *)
		iControllerType 		:= eCTRL_ControllerType_PID,	(* used controller normally PID *)
		
		
		(* min max temperatures	*)
		
		TempLowLow				:= 5.0,
		TempLow					:= 10.0,
		TempHigh				:= 205.0,
		TempHighHigh			:= 225.0,
		TempAbsoluteHigh		:= 240.0,
		TempAbsoluteLow			:= 5.0,	
		
		(* internal tuning parameters *)
		fTuneKp					:= 1.2,
		fTuneTn					:= 2.0,
		fTuneTv					:= 0.42,
		fTuneTd					:= 0.25
		);
	
	(* Other Function Blocks *)
	fbTempController			: FB_CTRL_TempController;	
	fbCtrlParameter				: FB_CTRL_CtrlParameter;
	stController				: ST_CTRL_ParaController;
	
	(* Debug *)
	fMaxOvershoot			: LREAL;
	tStartUpTime			: TIME;
	eCtrlState				: E_CTRL_STATE;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Heater is Enabled
IF bEnableHeater THEN  
	(* Start controller *)
	fbTempController(
						eCtrlMode				:= eCTRL_Mode, 
						bSelSetpoint			:= bSelSetpoint, 
						fW1						:= lrSP, 
						fW2						:= lrSP-30, 
						fX						:= lrPV, 
						fYManual				:= , 
						bOpenThermocouple		:= FALSE, 
						bReverseThermocouple	:= FALSE, 
						bBackVoltage			:= FALSE, 
						bLeakage				:= FALSE, 
						bShortCircuit			:= FALSE, 
						bOpenCircuit			:= FALSE, 
						sParaControllerExternal	:= stController, 
						sControllerParameter	:= stControllerParameter, 
						);
						
	(* Analog output *)			
	fY := fbTempController.fYAnalog;
	
	bError := fbTempController.bError;
	eErrorId := fbTempController.eErrorId;
	
	(* Choose set of controller parameters *)
	IF fbTempController.eCtrlState = eCTRL_STATE_TUNED THEN
		eCTRL_Mode := eCTRL_MODE_ACTIVE;	
	END_IF
	
	(* Debug *)
	fMaxOvershoot := fbTempController.fMaxOverShoot;
	tStartUpTime := fbTempController.tStartUpTime;
	
	(* Scope *)
	Scope_Variables.fW_Scope:= lrSP;
	Scope_Variables.fX_Scope := fX;
	Scope_Variables.fY_Scope := fY;
	
	(*FB Outputs *)
	bEnableHotend := TRUE;
	iOutput := REAL_TO_INT(fY);

ELSE // Heater Disabled
	bEnableHotend := FALSE;
	iOutput := 0;
	fbTempController(
		eCtrlMode				:= eCTRL_MODE_IDLE, 
		fW1						:= 0,
		sControllerParameter	:= stControllerParameter,
		);
END_IF]]></ST>
    </Implementation>
    <LineIds Name="FB_TempControl">
      <LineId Id="510" Count="1" />
      <LineId Id="481" Count="0" />
      <LineId Id="182" Count="38" />
      <LineId Id="491" Count="0" />
      <LineId Id="490" Count="0" />
      <LineId Id="509" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="500" Count="6" />
      <LineId Id="483" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>